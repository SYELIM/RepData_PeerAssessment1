steps_per_day2 <- activity_new %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(steps = sum(steps))
hist(steps_per_day2, main= "Mean total number of steps taken per day", xlab= "Steps/day", col="red")
steps_per_day2 <- activity_new %>%
filter(!is.na(steps)) %>%
group_by(interval) %>%
summarize(steps = sum(steps))
hist(steps_per_day2, main= "Mean total number of steps taken per day", xlab= "Steps/day", col="red")
activity_new <- activity
missing_data <- is.na(activity_new$steps)
mean_interval <- tapply(activity_new$steps, activity_new$interval, mean, na.rm=TRUE)
activity_new$steps[missing_data] <- mean_interval[as.character(activity_new$interval[missing_data])]
head(activity_new)
steps_per_day2 <- activity_new %>%
filter(!is.na(steps)) %>%
group_by(date) %>%
summarize(steps = sum(steps))
hist(steps_per_day2, main= "Mean total number of steps taken per day", xlab= "Steps/day", col="red")
##Calculate the total number of steps taken each day with new dataset
steps_per_day2 <- tapply(activity_new$steps, activity_new$date, sum)
##Make a histogram
hist(steps_per_day2, main= "Mean total number of steps taken per day", xlab= "Steps/day", col="red")
mean_per_day2 <- mean(steps_per_day2, na.rm=TRUE)
median_per_day2 <- median(steps_per_day2, na.rm = TRUE)
median_per_day2
hist(steps_per_day, col=rgb(1,0,0,0.5), main="Total number of steps taken each day", xlab="steps/day")
hist(steps_per_day2, col=rgb(0,0,1,0.5), add=T)
box()
missing_values <- sum(is.na(activity$steps))
print(missing_values)
?weekdays
activity_new <- mutate(activity_new, day=ifelse(weekdays(activity_new$date) == "Saturday" | weekdays(activity_new$date) == "Sunday", "Weekend", "Weekday))"))
activity_new <- as.factor(activity_new$day)
head(activity_new)
View(activity_new)
activity_new$day <- ifelse(activity_new$day %in% c("Saturday","Sunday"), "Weekend", "Weekday")
activity_new$daycat <- ifelse(activity_new$day %in% c("Saturday","Sunday"), "Weekend", "Weekday")
activity_new <- mutate(activity_new, day=ifelse(weekdays(activity_new$date) == c("Saturday","Sunday"), "Weekend", "Weekday))"))
activity_new <- as.factor(activity_new$day)
library(ggplot2)
steps_per_interval2 <- activity_new %>%
group_by(interval, day) %>%
summarize(steps = mean(steps))
library(dplyr)
activity <- read.csv("activity.csv")
activity[,2] <- as.Date(activity$date, format= "%Y-%m-%d")
#Calculate the total number of steps taken per day
steps_per_day <- tapply(activity$steps, activity$date, sum)
#Make a histogram
hist(steps_per_day, main= "Mean total number of steps taken per day", xlab= "Steps/day", col="red")
mean_per_day <- mean(steps_per_day, na.rm=TRUE)
median_per_day <- median(steps_per_day, na.rm = TRUE)
steps_per_interval <- activity %>%
filter(!is.na(steps)) %>%
group_by(interval) %>%
summarize(steps = mean(steps))
plot(steps_per_interval, type="l", xlab="Intervals", ylab="Avg. steps", main="Average Daily Activity Pattern")
max_steps <- arrange(steps_per_interval, desc(steps))
head(max_steps)
missing_values <- sum(is.na(activity$steps))
print(missing_values)
##Create a new dataset that is equal to the original dataset bu with the missing data filled in
activity_new <- activity
missing_data <- is.na(activity_new$steps)
mean_interval <- tapply(activity_new$steps, activity_new$interval, mean, na.rm=TRUE)
activity_new$steps[missing_data] <- mean_interval[as.character(activity_new$interval[missing_data])]
##Check the new dataset
head(activity_new)
##Calculate the total number of steps taken each day with new dataset
steps_per_day2 <- tapply(activity_new$steps, activity_new$date, sum)
hist(steps_per_day, col=rgb(1,0,0,0.5), main="Total number of steps taken each day", xlab="steps/day")
hist(steps_per_day2, col=rgb(0,0,1,0.5), add=T)
box()
#Calculate the mean and median total number of steps taken per day.
mean_per_day2 <- mean(steps_per_day2, na.rm=TRUE)
median_per_day2 <- median(steps_per_day2, na.rm = TRUE)
activity_new <- mutate(activity_new, day = ifelse(weekdays(activity_new$date) == c("Saturday","Sunday"), "Weekend", "Weekday"))
activity_new$day <- as.factor(activity_new$day)
library(ggplot2)
steps_per_interval2 <- activity_new %>%
group_by(interval, day) %>%
summarize(steps = mean(steps))
i <- ggplot(steps_per_interval2, aes(x=interval, y=steps, color=day)) + geom_line()+facet_wrap(~day, ncol = 1, nrow=2)
print(i)
i <- ggplot(steps_per_interval2, aes(x=interval, y=steps, color=day)) + geom_line()+facet_wrap(~day, ncol = 1, nrow=2)
print(i)
#Loading and preprocessing the data
##Load packages
library(ggplot2)
library(dplyr)
##Read data
activity <- read.csv("activity.csv")
##Convert the class of "date" from factor to date
activity[,2] <- as.Date(activity$date, format= "%Y-%m-%d")
#What is mean total number of steps taken per day?
##Calculate the total number of steps taken per day
steps_per_day <- tapply(activity$steps, activity$date, sum)
##Make a histogram
hist(steps_per_day, main= "Mean total number of steps taken per day", xlab= "Steps/day", col="red")
##Calculate and report the mean and median of the total number of steps taken per day
mean_per_day <- mean(steps_per_day, na.rm=TRUE)
median_per_day <- median(steps_per_day, na.rm = TRUE)
#What is the average daily activity pattern?
##Make a time series plot
steps_per_interval <- activity %>%
filter(!is.na(steps)) %>%
group_by(interval) %>%
summarize(steps = mean(steps))
plot(steps_per_interval, type="l", xlab="Intervals", ylab="Avg. steps", main="Average Daily Activity Pattern")
##Look for the interval that contains the maximum number of steps
max_steps <- arrange(steps_per_interval, desc(steps))
head(max_steps)
#Imputing missing values
##Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
missing_values <- sum(is.na(activity$steps))
print(missing_values)
##Fill in all the missing values in the dataset with the mean for that 5-minute interval.
mean_interval <- tapply(activity$steps, activity$interval, mean, na.rm=TRUE)
missing_data <- is.na(activity$steps)
##Create a new datast that is equal to the original dataset bu with the missing data filled in
activity_new <- activity
missing_data <- is.na(activity_new$steps)
mean_interval <- tapply(activity_new$steps, activity_new$interval, mean, na.rm=TRUE)
activity_new$steps[missing_data] <- mean_interval[as.character(activity_new$interval[missing_data])]
##Check the new dataset
head(activity_new)
##Calculate the total number of steps taken each day with new dataset
steps_per_day2 <- tapply(activity_new$steps, activity_new$date, sum)
#Make a histogram of the total number of steps taken each day
hist(steps_per_day, col=rgb(1,0,0,0.5), main="Total number of steps taken each day", xlab="steps/day")
hist(steps_per_day2, col=rgb(0,0,1,0.5), add=T)
box()
#Calculate and report the mean and median total number of steps taken per day.
mean_per_day2 <- mean(steps_per_day2, na.rm=TRUE)
median_per_day2 <- median(steps_per_day2, na.rm = TRUE)
#Do these values differ from the estimates from the first part of the assignment?
#What is the impact of imputing missing data on the estimates of the total daily number of steps?
##Looking at the new histogram, calculated mean and median, we can state that the mean stayed the same, while median has increased a little when NAs were replaced. (from 10765 to 10766.19)
#Are there differences in activity patterns between weekdays and weekends?
##Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
activity_new <- mutate(activity_new, day = ifelse(weekdays(activity_new$date) == c("Saturday","Sunday"), "Weekend", "Weekday"))
activity_new$day <- as.factor(activity_new$day)
##Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). The plot should look something like the following, which was created using simulated data:
steps_per_interval2 <- activity_new %>%
group_by(interval, day) %>%
summarize(steps = mean(steps))
i <- ggplot(steps_per_interval2, aes(x=interval, y=steps, color=day)) + geom_line()+facet_wrap(~day, ncol = 1, nrow=2)
print(i)
print(i)
ggplot(steps_per_interval2, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
steps_per_interval2
i <- ggplot(steps_per_interval2, aes(x=interval, y=steps, color=day)) + geom_line() + facet_grid(. ~day, ncol = 1, nrow=2)
library(ggplot2)
steps_per_interval2 <- activity_new %>%
group_by(interval, day) %>%
summarize(steps = mean(steps))
i <- ggplot(steps_per_interval2, aes(x=interval, y=steps, color=day)) + geom_line() + facet_grid(. ~day, ncol = 1, nrow=2)
?facet_wrap
library(dplyr)
activity <- read.csv("activity.csv")
activity[,2] <- as.Date(activity$date, format= "%Y-%m-%d")
#Calculate the total number of steps taken per day
steps_per_day <- tapply(activity$steps, activity$date, sum)
#Make a histogram
hist(steps_per_day, main= "Mean total number of steps taken per day", xlab= "Steps/day", col="red")
mean_per_day <- mean(steps_per_day, na.rm=TRUE)
median_per_day <- median(steps_per_day, na.rm = TRUE)
steps_per_interval <- activity %>%
filter(!is.na(steps)) %>%
group_by(interval) %>%
summarize(steps = mean(steps))
plot(steps_per_interval, type="l", xlab="Intervals", ylab="Avg. steps", main="Average Daily Activity Pattern")
max_steps <- arrange(steps_per_interval, desc(steps))
head(max_steps)
missing_values <- sum(is.na(activity$steps))
print(missing_values)
##Create a new dataset that is equal to the original dataset bu with the missing data filled in
activity_new <- activity
missing_data <- is.na(activity_new$steps)
mean_interval <- tapply(activity_new$steps, activity_new$interval, mean, na.rm=TRUE)
activity_new$steps[missing_data] <- mean_interval[as.character(activity_new$interval[missing_data])]
##Check the new dataset
head(activity_new)
##Calculate the total number of steps taken each day with new dataset
steps_per_day2 <- tapply(activity_new$steps, activity_new$date, sum)
hist(steps_per_day, col=rgb(1,0,0,0.5), main="Total number of steps taken each day", xlab="steps/day")
hist(steps_per_day2, col=rgb(0,0,1,0.5), add=T)
box()
#Calculate the mean and median total number of steps taken per day.
mean_per_day2 <- mean(steps_per_day2, na.rm=TRUE)
median_per_day2 <- median(steps_per_day2, na.rm = TRUE)
activity_new <- mutate(activity_new, day = ifelse(weekdays(activity_new$date) == c("Saturday","Sunday"), "Weekend", "Weekday"))
activity_new$day <- as.factor(activity_new$day)
library(ggplot2)
steps_per_interval2 <- activity_new %>%
group_by(interval, day) %>%
summarize(steps = mean(steps))
i <- ggplot(steps_per_interval2, aes(x=interval, y=steps, color=day))
i+geom_line() + facet_wrap(~day, ncol = 1, nrow=2)
str(activity_new)
```{r, echo=TRUE}
library(dplyr)
activity <- read.csv("activity.csv")
activity[,2] <- as.Date(activity$date, format= "%Y-%m-%d")
#Calculate the total number of steps taken per day
steps_per_day <- tapply(activity$steps, activity$date, sum)
#Make a histogram
hist(steps_per_day, main= "Mean total number of steps taken per day", xlab= "Steps/day", col="red")
mean_per_day <- mean(steps_per_day, na.rm=TRUE)
median_per_day <- median(steps_per_day, na.rm = TRUE)
steps_per_interval <- activity %>%
filter(!is.na(steps)) %>%
group_by(interval) %>%
summarize(steps = mean(steps))
plot(steps_per_interval, type="l", xlab="Intervals", ylab="Avg. steps", main="Average Daily Activity Pattern")
max_steps <- arrange(steps_per_interval, desc(steps))
head(max_steps)
missing_values <- sum(is.na(activity$steps))
print(missing_values)
##Create a new dataset that is equal to the original dataset bu with the missing data filled in
activity_new <- activity
missing_data <- is.na(activity_new$steps)
mean_interval <- tapply(activity_new$steps, activity_new$interval, mean, na.rm=TRUE)
activity_new$steps[missing_data] <- mean_interval[as.character(activity_new$interval[missing_data])]
##Check the new dataset
head(activity_new)
##Calculate the total number of steps taken each day with new dataset
steps_per_day2 <- tapply(activity_new$steps, activity_new$date, sum)
hist(steps_per_day, col=rgb(1,0,0,0.5), main="Total number of steps taken each day", xlab="steps/day")
hist(steps_per_day2, col=rgb(0,0,1,0.5), add=T)
box()
#Calculate the mean and median total number of steps taken per day.
mean_per_day2 <- mean(steps_per_day2, na.rm=TRUE)
median_per_day2 <- median(steps_per_day2, na.rm = TRUE)
activity_new <- mutate(activity_new, day = ifelse(weekdays(activity_new$date) == "Saturday" |weekdays(activity_new$date) == "Sunday", "Weekend", "Weekday"))
activity_new$day <- as.factor(activity_new$day)
library(ggplot2)
steps_per_interval2 <- activity_new %>%
group_by(interval, day) %>%
summarize(steps = mean(steps))
i <- ggplot(steps_per_interval2, aes(x=interval, y=steps, color=day)) + geom_line() + facet_wrap(~day, ncol = 1, nrow=2)
print(i)
str(activity_new)
#Are there differences in activity patterns between weekdays and weekends?
##Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
activity_new <- mutate(activity_new, day = ifelse(weekdays(activity_new$date) == "Saturday" |weekdays(activity_new$date) == "Sunday", "Weekend", "Weekday"))
#Loading and preprocessing the data
##Load packages
library(ggplot2)
library(dplyr)
##Read data
activity <- read.csv("activity.csv")
##Convert the class of "date" from factor to date
activity[,2] <- as.Date(activity$date, format= "%Y-%m-%d")
#What is mean total number of steps taken per day?
##Calculate the total number of steps taken per day
steps_per_day <- tapply(activity$steps, activity$date, sum)
##Make a histogram
hist(steps_per_day, main= "Mean total number of steps taken per day", xlab= "Steps/day", col="red")
##Calculate and report the mean and median of the total number of steps taken per day
mean_per_day <- mean(steps_per_day, na.rm=TRUE)
median_per_day <- median(steps_per_day, na.rm = TRUE)
#What is the average daily activity pattern?
##Make a time series plot
steps_per_interval <- activity %>%
filter(!is.na(steps)) %>%
group_by(interval) %>%
summarize(steps = mean(steps))
plot(steps_per_interval, type="l", xlab="Intervals", ylab="Avg. steps", main="Average Daily Activity Pattern")
##Look for the interval that contains the maximum number of steps
max_steps <- arrange(steps_per_interval, desc(steps))
head(max_steps)
#Imputing missing values
##Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
missing_values <- sum(is.na(activity$steps))
print(missing_values)
##Fill in all the missing values in the dataset with the mean for that 5-minute interval.
mean_interval <- tapply(activity$steps, activity$interval, mean, na.rm=TRUE)
missing_data <- is.na(activity$steps)
##Create a new datast that is equal to the original dataset bu with the missing data filled in
activity_new <- activity
missing_data <- is.na(activity_new$steps)
mean_interval <- tapply(activity_new$steps, activity_new$interval, mean, na.rm=TRUE)
activity_new$steps[missing_data] <- mean_interval[as.character(activity_new$interval[missing_data])]
##Check the new dataset
head(activity_new)
##Calculate the total number of steps taken each day with new dataset
steps_per_day2 <- tapply(activity_new$steps, activity_new$date, sum)
#Make a histogram of the total number of steps taken each day
hist(steps_per_day, col=rgb(1,0,0,0.5), main="Total number of steps taken each day", xlab="steps/day")
hist(steps_per_day2, col=rgb(0,0,1,0.5), add=T)
box()
#Calculate and report the mean and median total number of steps taken per day.
mean_per_day2 <- mean(steps_per_day2, na.rm=TRUE)
median_per_day2 <- median(steps_per_day2, na.rm = TRUE)
#Do these values differ from the estimates from the first part of the assignment?
#What is the impact of imputing missing data on the estimates of the total daily number of steps?
##Looking at the new histogram, calculated mean and median, we can state that the mean stayed the same, while median has increased a little when NAs were replaced. (from 10765 to 10766.19)
#Are there differences in activity patterns between weekdays and weekends?
##Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
activity_new <- mutate(activity_new, day = ifelse(weekdays(activity_new$date) == "Saturday" |weekdays(activity_new$date) == "Sunday", "Weekend", "Weekday"))
activity_new$day <- as.factor(activity_new$day)
##Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). The plot should look something like the following, which was created using simulated data:
steps_per_interval2 <- activity_new %>%
group_by(interval, day) %>%
summarize(steps = mean(steps))
i <- ggplot(steps_per_interval2, aes(x=interval, y=steps, color=day)) + geom_line()+facet_wrap(~day, ncol = 1, nrow=2)
print(i)
str(activity_new)
#Are there differences in activity patterns between weekdays and weekends?
##Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
activity_new <- mutate(activity_new, day = ifelse(weekdays(activity_new$date) == "Saturday" | "Sunday", "Weekend", "Weekday"))
#Loading and preprocessing the data
##Load packages
library(ggplot2)
library(dplyr)
##Read data
activity <- read.csv("activity.csv")
##Convert the class of "date" from factor to date
activity[,2] <- as.Date(activity$date, format= "%Y-%m-%d")
#What is mean total number of steps taken per day?
##Calculate the total number of steps taken per day
steps_per_day <- tapply(activity$steps, activity$date, sum)
##Make a histogram
hist(steps_per_day, main= "Mean total number of steps taken per day", xlab= "Steps/day", col="red")
##Calculate and report the mean and median of the total number of steps taken per day
mean_per_day <- mean(steps_per_day, na.rm=TRUE)
median_per_day <- median(steps_per_day, na.rm = TRUE)
#What is the average daily activity pattern?
##Make a time series plot
steps_per_interval <- activity %>%
filter(!is.na(steps)) %>%
group_by(interval) %>%
summarize(steps = mean(steps))
plot(steps_per_interval, type="l", xlab="Intervals", ylab="Avg. steps", main="Average Daily Activity Pattern")
##Look for the interval that contains the maximum number of steps
max_steps <- arrange(steps_per_interval, desc(steps))
head(max_steps)
#Imputing missing values
##Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
missing_values <- sum(is.na(activity$steps))
print(missing_values)
##Fill in all the missing values in the dataset with the mean for that 5-minute interval.
mean_interval <- tapply(activity$steps, activity$interval, mean, na.rm=TRUE)
missing_data <- is.na(activity$steps)
##Create a new datast that is equal to the original dataset bu with the missing data filled in
activity_new <- activity
missing_data <- is.na(activity_new$steps)
mean_interval <- tapply(activity_new$steps, activity_new$interval, mean, na.rm=TRUE)
activity_new$steps[missing_data] <- mean_interval[as.character(activity_new$interval[missing_data])]
##Check the new dataset
head(activity_new)
##Calculate the total number of steps taken each day with new dataset
steps_per_day2 <- tapply(activity_new$steps, activity_new$date, sum)
#Make a histogram of the total number of steps taken each day
hist(steps_per_day, col=rgb(1,0,0,0.5), main="Total number of steps taken each day", xlab="steps/day")
hist(steps_per_day2, col=rgb(0,0,1,0.5), add=T)
box()
#Calculate and report the mean and median total number of steps taken per day.
mean_per_day2 <- mean(steps_per_day2, na.rm=TRUE)
median_per_day2 <- median(steps_per_day2, na.rm = TRUE)
#Do these values differ from the estimates from the first part of the assignment?
#What is the impact of imputing missing data on the estimates of the total daily number of steps?
##Looking at the new histogram, calculated mean and median, we can state that the mean stayed the same, while median has increased a little when NAs were replaced. (from 10765 to 10766.19)
#Are there differences in activity patterns between weekdays and weekends?
##Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
activity_new <- mutate(activity_new, day = ifelse(weekdays(activity_new$date) == "Saturday" | "Sunday", "Weekend", "Weekday"))
activity_new$day <- as.factor(activity_new$day)
##Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). The plot should look something like the following, which was created using simulated data:
steps_per_interval2 <- activity_new %>%
group_by(interval, day) %>%
summarize(steps = mean(steps))
i <- ggplot(steps_per_interval2, aes(x=interval, y=steps, color=day)) + geom_line()+facet_wrap(~day, ncol = 1, nrow=2)
print(i)
i <- ggplot(steps_per_interval2, aes(x=interval, y=steps, color=day)) + geom_line()+facet_wrap(~ day, ncol = 1, nrow=2)
#Are there differences in activity patterns between weekdays and weekends?
##Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
activity_new <- mutate(activity_new, day = ifelse(weekdays(activity_new$date) == "Saturday" | weekdays(activity_new$date) =="Sunday", "Weekend", "Weekday"))
activity_new$day <- as.factor(activity_new$day)
head(activity_new)
str(activity_new)
#Loading and preprocessing the data
##Load packages
library(ggplot2)
library(dplyr)
##Read data
activity <- read.csv("activity.csv")
##Convert the class of "date" from factor to date
activity[,2] <- as.Date(activity$date, format= "%Y-%m-%d")
##Change language
Sys.setlocale("LC_TIME", "C")
#What is mean total number of steps taken per day?
##Calculate the total number of steps taken per day
steps_per_day <- tapply(activity$steps, activity$date, sum)
##Make a histogram
hist(steps_per_day, main= "Mean total number of steps taken per day", xlab= "Steps/day", col="red")
##Calculate and report the mean and median of the total number of steps taken per day
mean_per_day <- mean(steps_per_day, na.rm=TRUE)
median_per_day <- median(steps_per_day, na.rm = TRUE)
#What is the average daily activity pattern?
##Make a time series plot
steps_per_interval <- activity %>%
filter(!is.na(steps)) %>%
group_by(interval) %>%
summarize(steps = mean(steps))
plot(steps_per_interval, type="l", xlab="Intervals", ylab="Avg. steps", main="Average Daily Activity Pattern")
##Look for the interval that contains the maximum number of steps
max_steps <- arrange(steps_per_interval, desc(steps))
head(max_steps)
#Imputing missing values
##Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
missing_values <- sum(is.na(activity$steps))
print(missing_values)
##Fill in all the missing values in the dataset with the mean for that 5-minute interval.
mean_interval <- tapply(activity$steps, activity$interval, mean, na.rm=TRUE)
missing_data <- is.na(activity$steps)
##Create a new datast that is equal to the original dataset bu with the missing data filled in
activity_new <- activity
missing_data <- is.na(activity_new$steps)
mean_interval <- tapply(activity_new$steps, activity_new$interval, mean, na.rm=TRUE)
activity_new$steps[missing_data] <- mean_interval[as.character(activity_new$interval[missing_data])]
##Check the new dataset
head(activity_new)
##Calculate the total number of steps taken each day with new dataset
steps_per_day2 <- tapply(activity_new$steps, activity_new$date, sum)
#Make a histogram of the total number of steps taken each day
hist(steps_per_day, col=rgb(1,0,0,0.5), main="Total number of steps taken each day", xlab="steps/day")
hist(steps_per_day2, col=rgb(0,0,1,0.5), add=T)
box()
#Calculate and report the mean and median total number of steps taken per day.
mean_per_day2 <- mean(steps_per_day2, na.rm=TRUE)
median_per_day2 <- median(steps_per_day2, na.rm = TRUE)
#Do these values differ from the estimates from the first part of the assignment?
#What is the impact of imputing missing data on the estimates of the total daily number of steps?
##Looking at the new histogram, calculated mean and median, we can state that the mean stayed the same, while median has increased a little when NAs were replaced. (from 10765 to 10766.19)
#Are there differences in activity patterns between weekdays and weekends?
##Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
activity_new <- mutate(activity_new, day = ifelse(weekdays(activity_new$date) == "Saturday" | weekdays(activity_new$date) =="Sunday", "Weekend", "Weekday"))
activity_new$day <- as.factor(activity_new$day)
##Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). The plot should look something like the following, which was created using simulated data:
steps_per_interval2 <- activity_new %>%
group_by(interval, day) %>%
summarize(steps = mean(steps))
i <- ggplot(steps_per_interval2, aes(x=interval, y=steps, color=day)) + geom_line()+facet_wrap(~ day, ncol = 1, nrow=2)
print(i)
#Loading and preprocessing the data
##Load packages
library(ggplot2)
library(dplyr)
##Read data
activity <- read.csv("activity.csv")
##Convert the class of "date" from factor to date
activity[,2] <- as.Date(activity$date, format= "%Y-%m-%d")
##Change language
Sys.setlocale("LC_TIME", "C")
#What is mean total number of steps taken per day?
##Calculate the total number of steps taken per day
steps_per_day <- tapply(activity$steps, activity$date, sum)
##Make a histogram
hist(steps_per_day, main= "Mean total number of steps taken per day", xlab= "Steps/day", col="red")
##Calculate and report the mean and median of the total number of steps taken per day
mean_per_day <- mean(steps_per_day, na.rm=TRUE)
median_per_day <- median(steps_per_day, na.rm = TRUE)
#What is the average daily activity pattern?
##Make a time series plot
steps_per_interval <- activity %>%
filter(!is.na(steps)) %>%
group_by(interval) %>%
summarize(steps = mean(steps))
plot(steps_per_interval, type="l", xlab="Intervals", ylab="Avg. steps", main="Average Daily Activity Pattern")
##Look for the interval that contains the maximum number of steps
max_steps <- arrange(steps_per_interval, desc(steps))
head(max_steps)
#Imputing missing values
##Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
missing_values <- sum(is.na(activity$steps))
print(missing_values)
##Fill in all the missing values in the dataset with the mean for that 5-minute interval.
mean_interval <- tapply(activity$steps, activity$interval, mean, na.rm=TRUE)
missing_data <- is.na(activity$steps)
##Create a new datast that is equal to the original dataset bu with the missing data filled in
activity_new <- activity
missing_data <- is.na(activity_new$steps)
mean_interval <- tapply(activity_new$steps, activity_new$interval, mean, na.rm=TRUE)
activity_new$steps[missing_data] <- mean_interval[as.character(activity_new$interval[missing_data])]
##Check the new dataset
head(activity_new)
##Calculate the total number of steps taken each day with new dataset
steps_per_day2 <- tapply(activity_new$steps, activity_new$date, sum)
#Make a histogram of the total number of steps taken each day
hist(steps_per_day, col=rgb(1,0,0,0.5), main="Total number of steps taken each day", xlab="steps/day")
hist(steps_per_day2, col=rgb(0,0,1,0.5), add=T)
box()
#Calculate and report the mean and median total number of steps taken per day.
mean_per_day2 <- mean(steps_per_day2, na.rm=TRUE)
median_per_day2 <- median(steps_per_day2, na.rm = TRUE)
#Do these values differ from the estimates from the first part of the assignment?
#What is the impact of imputing missing data on the estimates of the total daily number of steps?
##Looking at the new histogram, calculated mean and median, we can state that the mean stayed the same, while median has increased a little when NAs were replaced. (from 10765 to 10766.19)
#Are there differences in activity patterns between weekdays and weekends?
##Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
activity_new <- mutate(activity_new, day = ifelse(weekdays(activity_new$date) == c("Saturday", "Sunday"), "Weekend", "Weekday"))
activity_new$day <- as.factor(activity_new$day)
##Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). The plot should look something like the following, which was created using simulated data:
steps_per_interval2 <- activity_new %>%
group_by(interval, day) %>%
summarize(steps = mean(steps))
i <- ggplot(steps_per_interval2, aes(x=interval, y=steps, color=day)) + geom_line()+facet_wrap(~ day, ncol = 1, nrow=2)
print(i)
